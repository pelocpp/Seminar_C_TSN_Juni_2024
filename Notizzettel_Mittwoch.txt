===================================

Grundlagen C

Peter Loos

===================================

Mittwoch

===================================

Struktur  => C

Was ist eine Struktur:

Ein Container für Daten.

// keine Methoden

Array: Viele Daten desselben Typs

Struktur: Viele Daten unterschiedlichen Typs

Beispiel:

Struktur SchülerDerTSN

 ==> Vorname   (Array von Zeichen / Zeichenketten)
 ==> Nachname  (Array von Zeichen / Zeichenketten)
 ==> Alter     int
 ==> Durchschnittsnote: float / double

 Struktur Uhrzeit:

  ==> Stunden, Minuten, Sekunden: int

 Per se nicht: Funktionen

 printTime

 incrementTime (Struktur Time)

 eine Sekunden auf eine Uhrzeit draufzählen

8:40:50  =>  8:40:51

8:40:59 => 8:41:00

8:59:59  => 09:00:00

// ==========================================

Speicherbereiche

===> Lokale Variablen (Funktionen / Unterprogramm)

===> Globale Variablen

===> Dynamische Variablen: Anlegen auf Anforderung

Python:

Example
Create an object named p1, and print the value of x:

    p1 = MyClass()
    print(p1.x)

C++ / Java:

Example
Create an object named p1, and print the value of x:

    p1 = new MyClass()
    print(p1.x)

// ==========================================

Speicherbereiche:

===> Lokale Variablen (Funktionen / Unterprogramm)

     = Zwischenergebnisse

===> Globale Variablen

     = Sind immer und überall verfügbar
     = Problem: Jeder kann sie ändern.

===> Dynamische Variablen

     = Werden dann angelegt, wenn man sie benötigt
     = Werden dann freigegeben, wenn man sie NICHT mehr benötigt


     malloc: memory allocate

     free:   memory wieder freigeben

=>   Es ist KEINE EINFACHE ENTSCHEIDUNG
     wer den Speicher wieder freigibt.

Wenn er freigegeben wurde, kann er nicht mehr verwendet werden.


=================================================

Mini Projekt
------------

==> Keine Zeiger, keine dyn. Daten

==> Struktur, Array, Funktionen

==> Header-File
