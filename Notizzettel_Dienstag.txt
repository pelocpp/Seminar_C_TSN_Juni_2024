===================================

Grundlagen C

Peter Loos

===================================

Dienstag

===================================

Arrays

(( Listen ))

Was ist ein Feld, Array:

Mehrere Variablen desselben Typs:

Liegen im Speicher DICHT nebeneinander.

===================================

#define   Max   100 

#define basiert auf Textersetzung

Präprozessor

int numbers[Max] = { 0 };

int numbers[100] = { 0 };

Achtung:

#define   Max   100;

int numbers[Max] = { 0 };

===> 

int numbers[100;] = { 0 };

   int Max = 200;

   ==> 

      int 200; = 200;


=============================================

Speicher:

a) Statischen Speicher:   FESTE LÄNGE

   VOR DEM START DES PROGRAMMS.

   ==>  .exe

b) Dynamischen Speicher

   WIRD EBENFALLS VOR DEM START DES PROGRAMMS
   bereit gestellt --- ist aber zunächst
   vom Programm NICHT Verwendet.

   malloc // free // =======> Rückgabe: Adresse
   new    // delete

   myList = list()   // da steckt new versteckt drin

Frage:

   Habe ein Feld der Länge 100 ...
   stelle später fest, brauche aber nur 50

A) Array (fester Länge):  

   Da sind die restlichen 50 Elemente dann verloren.

B) Man kann ein Feld auch mit einer VARIABLEN Länge
   vereinbaren:

   malloc // free


   ======================================

   A) Wir legen Felder der Länge 10 ab

   B) Wir belegen diese Felder mit Zufallszahlen vor

   C) Wir geben diese Felder auf der Konsole aus

   D) Wir berechnen von einem derartigen Feld:

   i) den größten Wert
   ii) den kleinsten Wert

======================================

a) Unterprogramm

    == Rückgabetyp: NICHTS // void
    == Können die return-Anweisung verwenden

b) Funktion

    == Rückgabetyp ungleich void (int, float, etc.)
    == Verwenden die return-Anweisung:
          return ergebnis;


Procedure // Function // Subroutine

Schnittstelle eines Unterprogramms:

==> Name
==> Parameter: Name des Parameters und der Typ
==> Rückgabetyp

Schnittstelle eines Unterprogramms:

Ist "Alles" OHNE die Realisierung (Rumpf)

======================================

NEULAND:

'=': 'int *' differs in levels of indirection from 'int'

======================================

void malDrei(int wert)
{
    wert = wert * 3;
}

void test_unterprogramme_02()
{
    int x = 10;

    malDrei(x);
}

ACHTUNG: 'wert' ist ein ANDERER Speicherplatz als 'x'

 'wert' ist eine Kopie von 'x'

======================================

Bestimmen Sie die Bildschirmausgabe des nachstehenden Programms,
ohne das Programm jedoch auszuführen:

#include <stdio.h>

void calculate (int* a, int b)
{
    *a = 4;
    b = b + *a;
    printf("%d - %d\n", *a, b);
}

void main()
{
    int a = 3;
    int b = 5;

    calculate(&a, b);

    printf("%d - %d\n", a, b);

    calculate(&b, a);

    printf("%d - %d\n", a, b);
}


===============================================

Zeichen

char 

===============================================

Zeichenketten

==> i)  Als Feld von char-Variablen
    ii) Das letzte Zeichen muss ein
        "Ende"-Zeichen sein: Terminierende 0.

Länge einer Zeichenkette:

Steht NICHT im Speicher // nirgends

Wir müssen diese berechnen 

"wir müssen das letzte Abschlusszeichen suchen"

===============================================

Zeichenketten in C und in Python:

Die beiden Sprachen befinden sich auf einem

unterschiedlichen LEVEL:

C: Ebene Speicher // Adressen // Funktionen

   ===> Leichtgewichtige Klasse:  Struktur


Python: Klassen // Methoden // Eigenschaften

